レイテンシーモンキーだと影響範囲が見積もりずらい。
FITならアプリケーションれべるでできるので1リクエストたんいでおこせる。

2013年から毎週カオスエンジニアリングしてるnetfix
カオスエンジニアリングは継続的にやるのはやっぱり開発者は怖いから規律をたてました。

プリンシパルをベースとして4つのフェーずをたてた
定常状態
まずは正常時の動きを定義する。CPUしようりつとか
仮説構築

故障発生
メディアの故障させるのはイメージ違い。いろ

仮説反証
反証された場合；プログラムの修正対策をねる
反証されない場合；問題ないからもっと負荷かけてみる。

これをループさせることをカオスループと呼んでいる（サイゲームズないで）


ChAPっていうブログで書いている
自動化するべきだし、デプロイの時にやりたい
CI/CDと統合していかなきゃいけない

aws にはgame-dayある。コンペ形式になってる。

chaosToolkitってのもOSSである

lambdaのようなサーバレスのものにもchaosできるようにしている。

chaosconf さんふらんしすこであったよ。

AWSのインシデントは未来のいつかはおこる。おこるときにどうすればいいかをかんがえとく

リリースした分だけ人増やすってのはアンチパターンである。
だからリリースしても同じ人数でいいようにする。

障害規模は見積もれるほうがいい。

